AWSTemplateFormatVersion: "2010-09-09"
Description: "Full CI/CD environment for the scheduled lambda"
Parameters:
  GitHubBranchName:
    Description: Name of the git branch to use for building
    Type: String
    Default: "master"
  GitHubOwner:
    Description: The owner or organization for the GitHub project
    Type: String
    Default: "SekibOmazic"
  GitHubRepo:
    Description: The GitHub repository name
    Type: String
    Default: "aws-lambda-scheduled"
  GitHubToken:
    Description: OAuth-Token for GitHub-Access
    Type: AWS::SSM::Parameter::Value<String>
    Default: /github/token
#  ServiceName:
#    Type: String
#    Default: !Sub "${AWS::StackName}"
  TableName:
    Type: String
    Description: (Required) The name of the new DynamoDB table you want to create and write to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  SearchTerm:
    Type: String
    Description: 'Twitter API search term. Example: #aws -filter:retweets -filter:replies'
    Default: '#aws -filter:retweets -filter:replies'
  TwitterApiKey:
    Type: String
    Description: Twitter API Key
  TwitterApiSecret:
    Type: String
    Description: Twitter API Secret
  TwitterAccessToken:
    Type: String
    Description: Twitter access token
  TwitterAccessTokenSecret:
    Type: String
    Description: Twitter access token secret
Resources:
  ### build integration S3 bucket
  IntegrationS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
  ### roles and policies for everything that happens in the pipeline
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole

  CodeBuildRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-codebuild-base-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - s3:*
              - logs:*
              - sts:AssumeRole
      Roles:
        - !Ref CodeBuildRole

  CodePipelineTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CodePipeline
    Properties:
      RoleName: !Sub ${AWS::StackName}-codepipeline-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Sid: 1
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codepipeline-policy
          PolicyDocument:
            Statement:
              # allow pipeline to use S3 bucket
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${IntegrationS3Bucket}"
                  - !Sub "arn:aws:s3:::${IntegrationS3Bucket}/*"

              # allow pipeline to use codebuild
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}"

              # allow pipeline to run CloudFormation operations
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-resources"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-resources/*"

              # IAM PassRole
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  CloudFormationTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      RoleName: !Sub ${AWS::StackName}-cloudformation-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - cloudformation.amazonaws.com
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-cloudformation-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:*
                  - lambda:*
                  - config:*
                  - iam:*
                  - cloudwatch:*
                  - events:*
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - dynamodb:DescribeTable
                  - dynamodb:CreateTable

  ### the actual build project and pipeline definition - scheduled-event-lambda
  ScheduledLambdaBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
        Packaging: zip
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        Type: LINUX_CONTAINER
        # This environment variable informs AWS CodeBuild where it can retrieve your code artifact.
        # You can specify any other environment variables your buildspec.yml is looking for.
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref IntegrationS3Bucket
      Name: !Sub ${AWS::StackName}
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: cicd/buildspec.yaml

  ScheduledLambdaPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - CodePipelineTrustRole
      - IntegrationS3Bucket
      - ScheduledLambdaBuildProject
      - CloudFormationTrustRole
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref IntegrationS3Bucket
      Name: !Sub ${AWS::StackName}-pipeline # scheduled-event-lambda-pipeline
      RoleArn: !GetAtt CodePipelineTrustRole.Arn
      Stages:
        - Name: GithubSource
          Actions:
            - Name: FetchSource
              ActionTypeId:
                Category: Source
                Provider: GitHub
                Owner: ThirdParty
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranchName
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref ScheduledLambdaBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: GenerateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: pipeline-changeset
                RoleArn: !GetAtt CloudFormationTrustRole.Arn
                StackName: !Sub ${AWS::StackName}-resources
                TemplatePath: BuildArtifact::packaged-stack.yaml
                ParameterOverrides: !Sub |
                  {
                    "DynamoDbTableName" : "${TableName}",
                    "TwitterSearchTerm" : "${SearchTerm}",
                    "ApiKey" : "${TwitterApiKey}",
                    "ApiSecret" : "${TwitterApiSecret}",
                    "AccessToken" : "${TwitterAccessToken}",
                    "AccessTokenSecret" : "${TwitterAccessTokenSecret}"
                  }
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              RunOrder: 2
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: pipeline-changeset
                StackName: !Sub ${AWS::StackName}-resources
