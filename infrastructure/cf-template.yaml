AWSTemplateFormatVersion: "2010-09-09"
Description: Scheduled Lambda that collects tweets and store them into DynamoDB

Parameters:
  DynamoDbTableName:
    Type: String
    Description: The name of the new DynamoDB table you want to create and write to.
  TwitterSearchTerm:
    Type: String
  # store following variables in SSM parameter store
  ApiKey:
    Type: String
    Description: Twitter API Key
  ApiSecret:
    Type: String
    Description: Twitter API Secret
  AccessToken:
    Type: String
    Description: Twitter access token
  AccessTokenSecret:
    Type: String
    Description: Twitter access token secret

#  ApiKey:
#    Type: AWS::SSM::Parameter::Value<String>
#    Default: /twitter/api-key
#    Description: Twitter API Key
#  ApiSecret:
#    Type: AWS::SSM::Parameter::Value<String>
#    Default: /twitter/api-secret
#    Description: Twitter API Secret
#  AccessToken:
#    Type: AWS::SSM::Parameter::Value<String>
#    Default: /twitter/access-token
#    Description: Twitter access token
#  AccessTokenSecret:
#    Type: AWS::SSM::Parameter::Value<String>
#    Default: /twitter/access-token-secret
#    Description: Twitter access token secret

Resources:

  # DynamoDB Table for the tweets
  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDbTableName
      AttributeDefinitions:
        - AttributeName: searchTerm
          AttributeType: S
        - AttributeName: tweetId
          AttributeType: N
      KeySchema:
        - AttributeName: searchTerm
          KeyType: HASH
        - AttributeName: tweetId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: execution-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - dynamoDB:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource: !GetAtt DynamoDbTable.Arn
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda
  ScheduledLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lamdba triggered by a scheduled CloudWatch Event
      Handler: com.omazicsekib.App
      Role: !GetAtt ExecutionRole.Arn
      Code: ../build/distributions/aws-lambda-scheduled.zip
      Runtime: java8
      Timeout: 30
      FunctionName: aws-lambda-scheduled
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
          SEARCH_TERM: !Ref TwitterSearchTerm
          API_KEY: !Ref ApiKey
          API_SECRET: !Ref ApiSecret
          ACCESS_TOKEN: !Ref AccessToken
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          # If you prefer to keep the keys in SSM Parameter Store instead of
          # being passed from the cli (via pipeline.yaml) you can use following:
          # API_KEY: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/twitter/api-key"
          # API_SECRET: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/twitter/api-secret"
          # ACCESS_TOKEN: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/twitter/access-token"
          # ACCESS_TOKEN_SECRET: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/twitter/access-token-secret"

  # CloudWatch Event Rule
  EventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Schedule for the Lambda function.
      ScheduleExpression: cron(0/5 * * * ? *) # run every 5 min.
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduledLambda.Arn
          Id: ScheduledLambdaEventRule

  # Resource-based policy. Allow Lambda invocation by CloudWatch event
  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ScheduledLambda.Arn
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventRule.Arn
